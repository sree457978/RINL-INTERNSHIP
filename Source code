1)Flask application
from flask import Flask, render_template, request, redirect, url_for
import pickle
import numpy as np
import matplotlib.pyplot as plt
import io
import base64
from sklearn.metrics import mean_squared_error

app = Flask(__name__)

# Load the trained machine learning model
model = pickle.load(open("D:\ml\model.pkl", "rb"))

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    # Get the input values from the form
    date_time = request.form.get("DATE_TIME")
    cb_flow = float(request.form.get("CB_FLOW"))
    cb_press = float(request.form.get("CB_PRESS"))
    cb_temp = float(request.form.get("CB_TEMP"))
    steam_flow = float(request.form.get("STEAM_FLOW"))
    steam_temp = float(request.form.get("STEAM_TEMP"))
    steam_press = float(request.form.get("STEAM_PRESS"))
    o2_press = float(request.form.get("O2_PRESS"))
    o2_flow = float(request.form.get("O2_FLOW"))
    o2_per = float(request.form.get("O2_PER"))
    pci = float(request.form.get("PCI"))
    atm_humid = float(request.form.get("ATM_HUMID"))
    hb_temp = float(request.form.get("HB_TEMP"))
    hb_press = float(request.form.get("HB_PRESS"))
    top_press = float(request.form.get("TOP_PRESS"))
    top_temp1 = float(request.form.get("TOP_TEMP1"))
    top_spray = float(request.form.get("TOP_SPRAY"))
    top_temp = float(request.form.get("TOP_TEMP"))
    top_press_1 = float(request.form.get("TOP_PRESS_1"))
    h2 = float(request.form.get("H2"))
    skin_temp_avg = float(request.form.get("SKIN_TEMP_AVG"))
    co = float(request.form.get("CO"))
    co2 = float(request.form.get("CO2"))

    # Create a numpy array of the input values
    input_data = np.array([
        cb_flow, cb_press, cb_temp, steam_flow, steam_temp, steam_press,
        o2_press, o2_flow, o2_per, pci, atm_humid, hb_temp, hb_press,
        top_press, top_temp1, top_spray, top_temp, top_press_1, h2,
        skin_temp_avg, co, co2
    ]).reshape(1, -1)

    # Make the prediction using the model
    prediction = model.predict(input_data)

    # Prepare the prediction results
    prediction_text = f"Prediction: {prediction}"

    # Calculate CO:CO2 ratios for different hours
    hours_range = range(1, 5)
    co_ratios = [co / (co2 * hours) for hours in hours_range]

    # Create a bar plot to visualize the ratios
    plt.bar(hours_range, co_ratios)
    plt.xlabel('Hours')
    plt.ylabel('CO:CO2 Ratio')
    plt.title('CO:CO2 Ratio After Different Hours')

    # Save the plot to a BytesIO object
    img_bytes = io.BytesIO()
    plt.savefig(img_bytes, format='jpg')
    img_bytes.seek(0)

    # Encode the image bytes as base64
    img_base64 = base64.b64encode(img_bytes.read()).decode('utf-8')

    # Calculate the mean squared error
    actual_values = [1.000367533, 1.004055304, 1.01027027, 1.002263991] # Actual CO:CO2 ratios as floats
    mse = mean_squared_error(actual_values, co_ratios)

    # Calculate the accuracy
    accuracy = 1 - mse

    return redirect(url_for('result', prediction_text=prediction_text, img_base64=img_base64,
                            ratio_labels=ratio_labels, mse=mse, accuracy=accuracy))

@app.route('/result')
def result():
    prediction_text = request.args.get('prediction_text')
    img_base64 = request.args.get('img_base64')
    ratio_labels = request.args.getlist('ratio_labels')
    mse = float(request.args.get('mse'))
    accuracy = float(request.args.get('accuracy'))

    # Render the result page with the prediction result, image, and ratios
    return render_template('result.html', prediction_text=prediction_text, img_base64=img_base64,
                           ratio_labels=ratio_labels, mse=mse, accuracy=accuracy)

if __name__ == '__main__':
    app.run(debug=True)



2)HTML index.html
<!DOCTYPE html>
<html>
<head>
<title>SP Projects</title>
<style>
body {
    background-image: url("https://dizz.com/wp-content/uploads/2021/10/modern-blast-furnace-under-repair-renovation-38945923-transformed.webp");
    background-position: center center;
    background-repeat: no-repeat;
    background-size: 100% 100%;
    font-family: 'Times New Roman', sans-serif;
    color: #333;
}
.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}
.header {
    text-align: center;
    margin-bottom: 40px;
}
h1 {
    font-size: 36px;
    color: black;
    font-family: 'Times New Roman', "cursive";
    font-weight: bolder;
    margin: 0;
}
h2 {
    font-family: 'Times New Roman', "cursive";
}
.form-container {
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 30px;
    padding-right: 50px;
    padding-bottom: 10px;
}
.form-container input[type="text"],
.form-container input[type="number"] {
    display: block;
    width: 100%;
    margin-bottom: 10px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-family: 'Times New Roman', "cursive";
    color: black;
}
.form-container input[type="submit"] {
    display: block;
    width: 200px;
    margin: 20px auto;
    padding: 10px;
    border-radius: 20px;
    border: none;
    background-color: black;
    color: #fff;
    font-size: 16px;
    cursor: pointer;
    font-family: 'Times New Roman', "cursive";
}
</style>
</head>
<body>
<div class="container">
    <div class="header">
        <h1>CO_CO2 RATIO PREDICTION USING MACHINE LEARNING</h1>
    </div>
    <div class="form-container">
        <h2>Input Values</h2>
        <form action="{{ url_for('predict') }}" method="post">
            <input type="text" name="DATE_TIME" placeholder="DATE_TIME">
            <input type="number" step="any" name="CB_FLOW" placeholder="CB_FLOW">
            <input type="number" step="any" name="CB_PRESS" placeholder="CB_PRESS">
            <!-- Add other input fields as needed -->
            <input type="submit" value="Predict">
        </form>
        <br>
    </div>
</div>
</body>
</html>



3)HTML(result)
<!DOCTYPE html>
<html>
<head>
<title>Result</title>
<style>
body {
    background: rgb(0, 128, 128);
    background: linear-gradient(0deg, rgba(0, 128, 128, 1) 9%, rgba(17, 2, 24, 1) 93%);
}
.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    font-family: "Comic Sans MS", "cursive";
}
h1 {
    color: white;
    text-align: center;
    font-size: 36px;
    margin-top: 0;
    margin-bottom: 30px;
}
h2 {
    color: #73ecfa;
}
li {
    font-weight: bold;
}
p {
    color: #e7ecf4;
    font-size: 18px;
    text-align: center;
    margin-top: 0;
}
ul {
    list-style-type: none;
    padding-left: 0;
    margin-top: 30px;
}
li {
    color: rgb(254, 250, 41);
    font-size: 16px;
